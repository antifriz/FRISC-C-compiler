		`ORG 400
		SUB SP,4,SP
		CALL main
		ADD SP,4,SP
		RET
main  
		PUSH R0
		PUSH R1
		SUB SP, 000000054, SP
		ADD SP, 000000004, R0
		STORE R0, ( SP + 000000000 )
		MOVE 000000000, R0
		STOREB R0, ( SP + 00000001F )
		MOVE 000000061, R0
		STOREB R0, ( SP + 00000001E )
		MOVE 00000006E, R0
		STOREB R0, ( SP + 00000001D )
		MOVE 000000069, R0
		STOREB R0, ( SP + 00000001C )
		MOVE 000000064, R0
		STOREB R0, ( SP + 00000001B )
		MOVE 00000006F, R0
		STOREB R0, ( SP + 00000001A )
		MOVE 000000067, R0
		STOREB R0, ( SP + 000000019 )
		MOVE 000000020, R0
		STOREB R0, ( SP + 000000018 )
		ADD SP, 000000018, R0
		STORE R0, ( SP + 000000014 )
		MOVE 000000000, R0
		STOREB R0, ( SP + 000000029 )
		MOVE 000000020, R0
		STOREB R0, ( SP + 000000028 )
		MOVE 000000073, R0
		STOREB R0, ( SP + 000000027 )
		MOVE 000000061, R0
		STOREB R0, ( SP + 000000026 )
		MOVE 00000006D, R0
		STOREB R0, ( SP + 000000025 )
		MOVE 000000049, R0
		STOREB R0, ( SP + 000000024 )
		ADD SP, 000000024, R0
		STORE R0, ( SP + 000000020 )
		MOVE 000000000, R0
		STOREB R0, ( SP + 000000044 )
		MOVE 000000020, R0
		STOREB R0, ( SP + 000000043 )
		MOVE 00000003F, R0
		STOREB R0, ( SP + 000000042 )
		MOVE 000000073, R0
		STOREB R0, ( SP + 000000041 )
		MOVE 000000061, R0
		STOREB R0, ( SP + 000000040 )
		MOVE 00000006D, R0
		STOREB R0, ( SP + 00000003F )
		MOVE 000000069, R0
		STOREB R0, ( SP + 00000003E )
		MOVE 000000020, R0
		STOREB R0, ( SP + 00000003D )
		MOVE 000000061, R0
		STOREB R0, ( SP + 00000003C )
		MOVE 00000006E, R0
		STOREB R0, ( SP + 00000003B )
		MOVE 000000069, R0
		STOREB R0, ( SP + 00000003A )
		MOVE 000000064, R0
		STOREB R0, ( SP + 000000039 )
		MOVE 00000006F, R0
		STOREB R0, ( SP + 000000038 )
		MOVE 000000067, R0
		STOREB R0, ( SP + 000000037 )
		MOVE 000000020, R0
		STOREB R0, ( SP + 000000036 )
		MOVE 00000006F, R0
		STOREB R0, ( SP + 000000035 )
		MOVE 00000006B, R0
		STOREB R0, ( SP + 000000034 )
		MOVE 000000069, R0
		STOREB R0, ( SP + 000000033 )
		MOVE 00000006C, R0
		STOREB R0, ( SP + 000000032 )
		MOVE 00000006F, R0
		STOREB R0, ( SP + 000000031 )
		MOVE 00000004B, R0
		STOREB R0, ( SP + 000000030 )
		ADD SP, 000000030, R0
		STORE R0, ( SP + 00000002C )
		MOVE 000000000, R0
		STOREB R0, ( SP + 000000052 )
		MOVE 000000061, R0
		STOREB R0, ( SP + 000000051 )
		MOVE 00000006C, R0
		STOREB R0, ( SP + 000000050 )
		MOVE 000000062, R0
		STOREB R0, ( SP + 00000004F )
		MOVE 000000061, R0
		STOREB R0, ( SP + 00000004E )
		MOVE 00000006C, R0
		STOREB R0, ( SP + 00000004D )
		MOVE 000000062, R0
		STOREB R0, ( SP + 00000004C )
		ADD SP, 00000004C, R0
		STORE R0, ( SP + 000000048 )
		LOAD R0, ( SP + 000000048 )
		STORE R0, ( SP + 000000000 )
		SUB SP, 000000004, SP
		CALL rs_init
		ADD SP, 000000004, SP
		LOAD R0, ( SP + 00000002C )
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_writeln
		ADD SP, 000000004, SP
		LOAD R0, ( SP + 000000000 )
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_readln
		ADD SP, 000000004, SP
		LOAD R1, ( SP + 000000020 )
		STORE R1, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_puts
		ADD SP, 000000004, SP
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_puts
		ADD SP, 000000004, SP
		LOAD R0, ( SP + 000000014 )
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_writeln
		ADD SP, 000000004, SP
		MOVE 000000000, R1
		STORE R1, ( SP + 000000010 )
		LOAD R0, ( SP + 000000010 )
		STORE R0, ( SP + 000000058 )
		ADD SP, 000000054, SP
		POP R1
		POP R0
		RET 
rs_init 
	RET
;lokacije rs232
IO_SIO_BYTE	`EQU	ffffff20	; byte, RW
IO_SIO_STATUS	`EQU	ffffff21	; byte, RD
IO_SIO_BAUD	`EQU	ffffff22	; half, WR

; definicije kojekakvih bitmaska
SIO_TX_BUSY	`EQU	04
SIO_RX_OVERRUN	`EQU	02
SIO_RX_FULL	`EQU	01
	
 
rs_puts
		PUSH R0
		PUSH R1
		PUSH R2
		LOAD R1, (SP+010)

rs1puts	
		LOADB R0, (R1)
		CMP R0, 0
		JR_Z rs3puts
		
rs2puts
		LOADB R2, (IO_SIO_STATUS)
		AND R2, SIO_TX_BUSY, R2
		JR_NZ rs2puts
		STOREB R0, (IO_SIO_BYTE)	
		ADD R1, 1, R1
		JR rs1puts		

rs3puts		
		POP R2
		POP R1
		POP R0
		RET
 
rs_putc		
		PUSH R0
		PUSH R1
		LOAD R0, (SP+0C)
		
rs1putc
		LOADB R1, (IO_SIO_STATUS)
		AND R1, SIO_TX_BUSY, R1
		JR_NZ rs1putc
		STOREB R0, (IO_SIO_BYTE)
		POP R1
		POP R0
		RET
 
rs_getc  
		RET 
;using rs_putc
;using rs_puts
rs_writeln
		PUSH R1
		
		LOAD R1, (SP+8) ; txt
		PUSH R1
		CALL rs_puts

		MOVE 0A, R1 ; \r
		STORE R1, (SP)
		CALL rs_putc

		MOVE 0D,R1 ; \n
		STORE R1, (SP)
		CALL rs_putc
		ADD SP,4,SP

		POP R1
		RET	
 
rs_readln
		PUSH R0
		PUSH R1
		LOAD R1,(SP+0C)
		SUB R1,1,R1
		
rs1readln
		LOADB R0, (IO_SIO_STATUS)
		AND R0, SIO_RX_FULL, R0
		JR_Z rs1readln
		LOADB R0, (IO_SIO_BYTE)
				
		
		ADD R1,1,R1
		CMP R0,0D ; == \r
		JR_Z rs2readln
		CMP R0,0A ; == \n
		JR_Z rs2readln		
		
		PUSH R0
		CALL rs_putc
		POP R0
		
		STOREB R0, (R1)
		JR rs1readln

rs2readln
		MOVE 0,R0
		STORE R0,(R1)
		STORE R1,(SP+0C)
		
		POP R1
		POP R0
		RET
 
