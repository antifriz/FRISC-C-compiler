		`ORG 400
		SUB SP,4,SP
		CALL main
		ADD SP,4,SP
		RET
main  
		PUSH R0
		PUSH R1
		SUB SP, 000000008, SP
		MOVE const4, R0
		STORE R0, ( SP + 000000000 )
		SUB SP, 000000004, SP
		CALL rs_init
		ADD SP, 000000004, SP
		LOAD R0, ( const0 )
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_writeln
		ADD SP, 000000004, SP
		LOAD R0, ( SP + 000000000 )
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_readln
		ADD SP, 000000004, SP
		LOAD R1, ( const1 )
		STORE R1, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_writeln
		ADD SP, 000000004, SP
		LOAD R1, ( const2 )
		STORE R1, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_puts
		ADD SP, 000000004, SP
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_puts
		ADD SP, 000000004, SP
		LOAD R0, ( const3 )
		STORE R0, ( SP-000000004 )
		SUB SP, 000000004, SP
		CALL rs_writeln
		ADD SP, 000000004, SP
		MOVE 000000000, R1
		STORE R1, ( SP + 000000004 )
		LOAD R0, ( SP + 000000004 )
		STORE R0, ( SP + 00000000C )
		ADD SP, 000000008, SP
		POP R1
		POP R0
		RET 
rs_init 
	RET
;lokacije rs232
IO_SIO_BYTE	`EQU	ffffff20	; byte, RW
IO_SIO_STATUS	`EQU	ffffff21	; byte, RD
IO_SIO_BAUD	`EQU	ffffff22	; half, WR

; definicije kojekakvih bitmaska
SIO_TX_BUSY	`EQU	04
SIO_RX_OVERRUN	`EQU	02
SIO_RX_FULL	`EQU	01
	
 
rs_puts
		PUSH R0
		PUSH R1
		PUSH R2
		LOAD R1, (SP+010)

rs1puts	
		LOADB R0, (R1)
		CMP R0, 0
		JR_Z rs3puts
		
rs2puts
		LOADB R2, (IO_SIO_STATUS)
		AND R2, SIO_TX_BUSY, R2
		JR_NZ rs2puts
		STOREB R0, (IO_SIO_BYTE)	
		ADD R1, 1, R1
		JR rs1puts		

rs3puts		
		POP R2
		POP R1
		POP R0
		RET
 
rs_putc		
		PUSH R0
		PUSH R1
		LOAD R0, (SP+0C)
		
rs1putc
		LOADB R1, (IO_SIO_STATUS)
		AND R1, SIO_TX_BUSY, R1
		JR_NZ rs1putc
		STOREB R0, (IO_SIO_BYTE)
		POP R1
		POP R0
		RET
 
rs_getc  
		RET 
;using rs_putc
;using rs_puts
rs_writeln
		PUSH R1
		
		LOAD R1, (SP+8) ; txt
		PUSH R1
		CALL rs_puts

		MOVE 0A, R1 ; \r
		STORE R1, (SP)
		CALL rs_putc

		MOVE 0D,R1 ; \n
		STORE R1, (SP)
		CALL rs_putc
		ADD SP,4,SP

		POP R1
		RET	
 
rs_readln
		PUSH R0
		PUSH R1
		LOAD R1,(SP+0C)
		SUB R1,1,R1
		
rs1readln
		LOADB R0, (IO_SIO_STATUS)
		AND R0, SIO_RX_FULL, R0
		JR_Z rs1readln
		LOADB R0, (IO_SIO_BYTE)
				
		
		ADD R1,1,R1
		CMP R0,0D ; == \r
		JR_Z rs2readln
		CMP R0,0A ; == \n
		JR_Z rs2readln		
		
		PUSH R0
		CALL rs_putc
		POP R0
		
		STOREB R0, (R1)
		JR rs1readln

rs2readln
		MOVE 0,R0
		STOREB R0,(R1)
		STORE R1,(SP+0C)
		
		POP R1
		POP R0
		RET

 
const0 DW temp_1
temp_1 DB 00000004B, 00000006F, 00000006C, 000000069
		DB 00000006B, 00000006F, 000000020, 000000069
		DB 00000006D, 000000061, 000000073, 000000020
		DB 000000067, 00000006F, 000000064, 000000069
		DB 00000006E, 000000061, 000000020, 000000070
		DB 000000069, 000000074, 000000061, 000000068
		DB 000000020, 000000074, 000000065, 00000003F
		DB 000000000, 000000000, 000000000, 000000000
const1 DW temp_2
temp_2 DB 000000000, 000000000, 000000000, 000000000
const2 DW temp_3
temp_3 DB 000000049, 00000006D, 000000061, 000000073
		DB 000000020, 000000000, 000000000, 000000000
const3 DW temp_4
temp_4 DB 000000020, 000000067, 00000006F, 000000064
		DB 000000069, 00000006E, 000000061, 000000000
const4 DW temp_5
temp_5 `DS 80
