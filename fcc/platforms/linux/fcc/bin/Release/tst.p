                       		`ORG 400 
00000400  04 00 F0 37  		SUB SP,4,SP 
00000404  B4 05 00 CC  		CALL main 
00000408  04 00 F0 27  		ADD SP,4,SP 
0000040C  00 00 00 D8  		RET 
                       ;mnozenje 2k 4byte registri, spremanje rezultata na stog 
                       MultiplySigned 
00000410  00 00 00 88  		PUSH R0 
00000414  00 00 80 88  		PUSH R1 
00000418  00 00 00 89  		PUSH R2 
0000041C  00 00 00 05  		MOVE 0, R2 
00000420  14 00 70 B4  		LOAD R0, (SP+14); ucitaj prvi broj 
00000424  10 00 F0 B4  		LOAD R1, (SP+10); ucitaj drugi broj 
00000428  01 00 90 5C  MULSIG1			SHR R1, 1, R1 ;pomakni drugi broj za 1 udesno 
0000042C  34 04 00 C5  		JP_NC MULSIG2 
00000430  00 00 04 21  		ADD R0,R2,R2 
00000434  01 00 00 54  MULSIG2		SHL R0,1,R0 
00000438  00 00 10 6C  		CMP R1, 0 
0000043C  28 04 00 C6  		JP_NE MULSIG1 ;rezultat je u R2 
00000440  14 00 70 BD  		STORE R2, (SP+14)  
00000444  00 00 00 81  		POP R2 
00000448  00 00 80 80  		POP R1 
0000044C  00 00 00 80  		POP R0 
00000450  00 00 00 D8  		RET 
00000454  00 00 00 88  DivideSigned	PUSH R0 
00000458  00 00 80 88  			PUSH R1 
0000045C  00 00 00 89  			PUSH R2 
00000460  00 00 80 89  			PUSH R3 
00000464  00 00 00 8A  			PUSH R4 ;boolean za predznak 
00000468  00 00 00 06  			MOVE 0, R4 
0000046C  1C 00 F0 B4  			LOAD R1, (SP+1C) ;ucitaj veci ili prvi 
00000470  18 00 70 B5  			LOAD R2, (SP+18) ;ucitaj manji ili drugi 
00000474  00 00 00 04  			MOVE 0, R0 ;rezultat se sprema u R0 
00000478  01 00 80 05  			MOVE 1, R3 ;na neki nacin kompas 
0000047C  00 00 20 6C  			CMP R2, 0 
00000480  00 05 C0 C5  			JP_EQ DIVSIG7 ;ne smijes djeliti sa nulom 
00000484  90 04 80 C7  			JP_SGT DIVSIG1 
00000488  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno  
0000048C  00 00 04 31  			SUB R0, R2, R2 
00000490  00 00 10 6C  DIVSIG1			CMP R1, 0 	   ;ako je pozitivan idi DIVSIG3 xd 
00000494  A0 04 80 C7  			JP_SGT DIVSIG2 
00000498  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno 
0000049C  00 00 82 30  			SUB R0, R1, R1 
                        
000004A0  00 00 22 68  DIVSIG2			CMP R2, R1 
000004A4  B4 04 80 C7  			JP_SGT DIVSIG3 
000004A8  01 00 20 55  			SHL R2, 1, R2 
000004AC  01 00 B0 55  			SHL R3, 1, R3 
000004B0  A0 04 00 C4  			JP DIVSIG2 
000004B4  00 00 14 68  DIVSIG3		CMP R1, R2	   ;zelimo da R1>R2 
000004B8  C4 04 C0 C6  			JP_SLT DIVSIG4 ;ako nije  
000004BC  00 00 94 30  			SUB R1,R2,R1 
000004C0  00 00 06 20  			ADD R0,R3,R0 
000004C4  01 00 B0 5D  DIVSIG4		SHR R3,1,R3 
000004C8  D4 04 C0 C4  			JP_C DIVSIG5 
000004CC  01 00 20 5D  			SHR R2,1,R2 
000004D0  B4 04 00 C4  			JP DIVSIG3 
000004D4  01 00 40 5E  DIVSIG5			SHR R4,1,R4 
000004D8  E4 04 00 C5  			JP_NC DIVSIG6 
000004DC  00 00 80 05  			MOVE 0, R3 
000004E0  00 00 30 30  			SUB R3,R0,R0 ;baci minus na rezultat 
000004E4  1C 00 70 BC  DIVSIG6		STORE R0,(SP+1C) 
000004E8  00 00 00 82  			POP R4 
000004EC  00 00 80 81  			POP R3 
000004F0  00 00 00 81  			POP R2 
000004F4  00 00 80 80  			POP R1 
000004F8  00 00 00 80  			POP R0 
000004FC  00 00 00 D8  			RET 
00000500  00 00 00 F8  DIVSIG7		HALT 
00000504  00 00 00 88  ModuloSigned	PUSH R0 
00000508  00 00 80 88  			PUSH R1 
0000050C  00 00 00 89  			PUSH R2 
00000510  00 00 80 89  			PUSH R3 
00000514  00 00 00 8A  			PUSH R4 ;boolean za predznak 
00000518  00 00 00 06  			MOVE 0, R4 
0000051C  1C 00 F0 B4  			LOAD R1, (SP+1C) ;ucitaj veci ili prvi 
00000520  18 00 70 B5  			LOAD R2, (SP+18) ;ucitaj manji ili drugi 
00000524  00 00 00 04  			MOVE 0, R0 ;rezultat se sprema u R0 
00000528  01 00 80 05  			MOVE 1, R3 ;na neki nacin kompas 
0000052C  00 00 20 6C  			CMP R2, 0 
00000530  B0 05 C0 C5  			JP_EQ MODUSG7 ;ne smijes djeliti sa nulom 
00000534  40 05 80 C7  			JP_SGT MODUSG1 
00000538  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno  
0000053C  00 00 04 31  			SUB R0, R2, R2 
00000540  00 00 10 6C  MODUSG1			CMP R1, 0 	   ;ako je pozitivan idi MODUSG3 xd 
00000544  50 05 80 C7  			JP_SGT MODUSG2 
00000548  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno 
0000054C  00 00 82 30  			SUB R0, R1, R1 
                        
00000550  00 00 22 68  MODUSG2			CMP R2, R1 
00000554  64 05 80 C7  			JP_SGT MODUSG3 
00000558  01 00 20 55  			SHL R2, 1, R2 
0000055C  01 00 B0 55  			SHL R3, 1, R3 
00000560  50 05 00 C4  			JP MODUSG2 
00000564  00 00 14 68  MODUSG3		CMP R1, R2	   ;zelimo da R1>R2 
00000568  74 05 C0 C6  			JP_SLT MODUSG4 ;ako nije  
0000056C  00 00 94 30  			SUB R1,R2,R1 
00000570  00 00 06 20  			ADD R0,R3,R0 
00000574  01 00 B0 5D  MODUSG4		SHR R3,1,R3 
00000578  84 05 C0 C4  			JP_C MODUSG5 
0000057C  01 00 20 5D  			SHR R2,1,R2 
00000580  64 05 00 C4  			JP MODUSG3 
00000584  00 00 40 6C  MODUSG5			CMP R4,0 
00000588  94 05 C0 C5  			JP_EQ MODUSG6 
0000058C  00 00 80 05  			MOVE 0, R3 
00000590  00 00 B2 30  			SUB R3,R1,R1 ;baci minus na rezultat 
00000594  1C 00 F0 BC  MODUSG6		STORE R1,(SP+1C) 
00000598  00 00 00 82  			POP R4 
0000059C  00 00 80 81  			POP R3 
000005A0  00 00 00 81  			POP R2 
000005A4  00 00 80 80  			POP R1 
000005A8  00 00 00 80  			POP R0 
000005AC  00 00 00 D8  			RET 
000005B0  00 00 00 F8  MODUSG7		HALT 
                       main   
000005B4  00 00 00 88  		PUSH R0 
000005B8  00 00 80 88  		PUSH R1 
000005BC  00 00 00 89  		PUSH R2 
000005C0  00 00 80 89  		PUSH R3 
000005C4  44 00 F0 37  		SUB SP, 000000044, SP 
000005C8  E0 0C 00 B0  		LOAD R0, ( const5 ) 
000005CC  00 00 70 BC  		STORE R0, ( SP + 000000000 ) 
000005D0  04 00 F0 37  		SUB SP, 000000004, SP 
000005D4  08 09 00 CC  		CALL rs_init 
000005D8  04 00 F0 27  		ADD SP, 000000004, SP 
000005DC  7C 0C 00 B0  		LOAD R0, ( const0 ) 
000005E0  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000005E4  04 00 F0 37  		SUB SP, 000000004, SP 
000005E8  98 09 00 CC  		CALL rs_writeln 
000005EC  04 00 F0 27  		ADD SP, 000000004, SP 
000005F0  00 00 70 B4  		LOAD R0, ( SP + 000000000 ) 
000005F4  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000005F8  04 00 F0 37  		SUB SP, 000000004, SP 
000005FC  CC 09 00 CC  		CALL rs_readln 
00000600  04 00 F0 27  		ADD SP, 000000004, SP 
00000604  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
00000608  04 00 F0 37  		SUB SP, 000000004, SP 
0000060C  04 0C 00 CC  		CALL atoi 
00000610  00 00 80 80  		POP R1 
00000614  94 0C 00 B1  		LOAD R2, ( const1 ) 
00000618  FC FF 7F BD  		STORE R2, ( SP-000000004 ) 
0000061C  04 00 F0 37  		SUB SP, 000000004, SP 
00000620  98 09 00 CC  		CALL rs_writeln 
00000624  04 00 F0 27  		ADD SP, 000000004, SP 
00000628  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
0000062C  04 00 F0 37  		SUB SP, 000000004, SP 
00000630  CC 09 00 CC  		CALL rs_readln 
00000634  04 00 F0 27  		ADD SP, 000000004, SP 
00000638  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
0000063C  04 00 F0 37  		SUB SP, 000000004, SP 
00000640  04 0C 00 CC  		CALL atoi 
00000644  00 00 00 81  		POP R2 
00000648  0C 00 70 BD  		STORE R2, ( SP + 00000000C ) 
0000064C  AC 0C 00 B1  		LOAD R2, ( const2 ) 
00000650  FC FF 7F BD  		STORE R2, ( SP-000000004 ) 
00000654  04 00 F0 37  		SUB SP, 000000004, SP 
00000658  98 09 00 CC  		CALL rs_writeln 
0000065C  04 00 F0 27  		ADD SP, 000000004, SP 
00000660  04 00 F0 37  		SUB SP, 000000004, SP 
00000664  78 09 00 CC  		CALL rs_getc 
00000668  00 00 00 81  		POP R2 
0000066C  D0 0C 80 B1  		LOAD R3, ( const3 ) 
00000670  FC FF FF BD  		STORE R3, ( SP-000000004 ) 
00000674  04 00 F0 37  		SUB SP, 000000004, SP 
00000678  0C 09 00 CC  		CALL rs_puts 
0000067C  04 00 F0 27  		ADD SP, 000000004, SP 
00000680  FC FF FF BC  		STORE R1, ( SP-000000004 ) 
00000684  10 00 F0 BC  		STORE R1, ( SP + 000000010 ) 
00000688  F8 FF 7F BC  		STORE R0, ( SP-000000008 ) 
0000068C  0A 00 80 04  		MOVE 00000000A, R1 
00000690  F4 FF FF BC  		STORE R1, ( SP-00000000C ) 
00000694  0C 00 F0 37  		SUB SP, 00000000C, SP 
00000698  44 0A 00 CC  		CALL itoa 
0000069C  08 00 F0 27  		ADD SP, 000000008, SP 
000006A0  00 00 00 80  		POP R0 
000006A4  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000006A8  40 00 70 BC  		STORE R0, ( SP + 000000040 ) 
000006AC  04 00 F0 37  		SUB SP, 000000004, SP 
000006B0  0C 09 00 CC  		CALL rs_puts 
000006B4  04 00 F0 27  		ADD SP, 000000004, SP 
000006B8  18 00 20 55  		SHL R2, 000000018, R2 
000006BC  18 00 20 65  		ASHR R2, 000000018, R2 
000006C0  3C 00 70 BD  		STORE R2, ( SP + 00000003C ) 
000006C4  04 00 70 9D  		STOREB R2, ( SP + 000000004 ) 
000006C8  3C 00 70 B4  		LOAD R0, ( SP + 00000003C ) 
000006CC  FC FF 7F 9C  		STOREB R0, ( SP-000000004 ) 
000006D0  04 00 F0 37  		SUB SP, 000000004, SP 
000006D4  50 09 00 CC  		CALL rs_putc 
000006D8  04 00 F0 27  		ADD SP, 000000004, SP 
000006DC  0C 00 70 B4  		LOAD R0, ( SP + 00000000C ) 
000006E0  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000006E4  00 00 70 B4  		LOAD R0, ( SP + 000000000 ) 
000006E8  F8 FF 7F BC  		STORE R0, ( SP-000000008 ) 
000006EC  0A 00 80 04  		MOVE 00000000A, R1 
000006F0  F4 FF FF BC  		STORE R1, ( SP-00000000C ) 
000006F4  0C 00 F0 37  		SUB SP, 00000000C, SP 
000006F8  44 0A 00 CC  		CALL itoa 
000006FC  08 00 F0 27  		ADD SP, 000000008, SP 
00000700  00 00 00 80  		POP R0 
00000704  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
00000708  38 00 70 BC  		STORE R0, ( SP + 000000038 ) 
0000070C  04 00 F0 37  		SUB SP, 000000004, SP 
00000710  0C 09 00 CC  		CALL rs_puts 
00000714  04 00 F0 27  		ADD SP, 000000004, SP 
00000718  D8 0C 00 B0  		LOAD R0, ( const4 ) 
0000071C  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
00000720  04 00 F0 37  		SUB SP, 000000004, SP 
00000724  0C 09 00 CC  		CALL rs_puts 
00000728  04 00 F0 27  		ADD SP, 000000004, SP 
0000072C  04 00 70 94  		LOADB R0, ( SP + 000000004 ) 
00000730  18 00 00 54  		SHL R0, 000000018, R0 
00000734  18 00 00 64  		ASHR R0, 000000018, R0 
00000738  2B 00 00 6C  		CMP R0, 00000002B 
0000073C  04 00 C0 D5  		JR_EQ D1235 
00000740  4C 00 00 D6  		JR_NE D1236 
                       D1235   
00000744  10 00 70 B4  		LOAD R0, ( SP + 000000010 ) 
00000748  0C 00 F0 B4  		LOAD R1, ( SP + 00000000C ) 
0000074C  00 00 02 21  		ADD R0, R1, R2 
00000750  FC FF 7F BD  		STORE R2, ( SP-000000004 ) 
00000754  34 00 70 BD  		STORE R2, ( SP + 000000034 ) 
00000758  00 00 70 B4  		LOAD R0, ( SP + 000000000 ) 
0000075C  F8 FF 7F BC  		STORE R0, ( SP-000000008 ) 
00000760  0A 00 80 04  		MOVE 00000000A, R1 
00000764  F4 FF FF BC  		STORE R1, ( SP-00000000C ) 
00000768  0C 00 F0 37  		SUB SP, 00000000C, SP 
0000076C  44 0A 00 CC  		CALL itoa 
00000770  08 00 F0 27  		ADD SP, 000000008, SP 
00000774  00 00 00 80  		POP R0 
00000778  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
0000077C  30 00 70 BC  		STORE R0, ( SP + 000000030 ) 
00000780  04 00 F0 37  		SUB SP, 000000004, SP 
00000784  98 09 00 CC  		CALL rs_writeln 
00000788  04 00 F0 27  		ADD SP, 000000004, SP 
0000078C  50 01 00 D4  		JR D1239 
                       D1236   
00000790  04 00 70 94  		LOADB R0, ( SP + 000000004 ) 
00000794  18 00 00 54  		SHL R0, 000000018, R0 
00000798  18 00 00 64  		ASHR R0, 000000018, R0 
0000079C  2D 00 00 6C  		CMP R0, 00000002D 
000007A0  04 00 C0 D5  		JR_EQ D1240 
000007A4  4C 00 00 D6  		JR_NE D1241 
                       D1240   
000007A8  10 00 70 B4  		LOAD R0, ( SP + 000000010 ) 
000007AC  0C 00 F0 B4  		LOAD R1, ( SP + 00000000C ) 
000007B0  00 00 02 31  		SUB R0, R1, R2 
000007B4  FC FF 7F BD  		STORE R2, ( SP-000000004 ) 
000007B8  2C 00 70 BD  		STORE R2, ( SP + 00000002C ) 
000007BC  00 00 70 B4  		LOAD R0, ( SP + 000000000 ) 
000007C0  F8 FF 7F BC  		STORE R0, ( SP-000000008 ) 
000007C4  0A 00 80 04  		MOVE 00000000A, R1 
000007C8  F4 FF FF BC  		STORE R1, ( SP-00000000C ) 
000007CC  0C 00 F0 37  		SUB SP, 00000000C, SP 
000007D0  44 0A 00 CC  		CALL itoa 
000007D4  08 00 F0 27  		ADD SP, 000000008, SP 
000007D8  00 00 00 80  		POP R0 
000007DC  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000007E0  28 00 70 BC  		STORE R0, ( SP + 000000028 ) 
000007E4  04 00 F0 37  		SUB SP, 000000004, SP 
000007E8  98 09 00 CC  		CALL rs_writeln 
000007EC  04 00 F0 27  		ADD SP, 000000004, SP 
000007F0  EC 00 00 D4  		JR D1244 
                       D1241   
000007F4  04 00 70 94  		LOADB R0, ( SP + 000000004 ) 
000007F8  18 00 00 54  		SHL R0, 000000018, R0 
000007FC  18 00 00 64  		ASHR R0, 000000018, R0 
00000800  2A 00 00 6C  		CMP R0, 00000002A 
00000804  04 00 C0 D5  		JR_EQ D1245 
00000808  60 00 00 D6  		JR_NE D1246 
                       D1245   
0000080C  10 00 70 B4  		LOAD R0, ( SP + 000000010 ) 
00000810  FC FF 7F BC  		STORE R0, ( SP-4 ) 
00000814  0C 00 70 B4  		LOAD R0, ( SP + 00000000C ) 
00000818  F8 FF 7F BC  		STORE R0, ( SP-8 ) 
0000081C  08 00 F0 37  		SUB SP, 8, SP 
00000820  10 04 00 CC  		CALL MultiplySigned 
00000824  04 00 F0 27  		ADD SP, 4, SP 
00000828  00 00 00 80  		POP R0 
0000082C  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
00000830  24 00 70 BC  		STORE R0, ( SP + 000000024 ) 
00000834  00 00 70 B4  		LOAD R0, ( SP + 000000000 ) 
00000838  F8 FF 7F BC  		STORE R0, ( SP-000000008 ) 
0000083C  0A 00 80 04  		MOVE 00000000A, R1 
00000840  F4 FF FF BC  		STORE R1, ( SP-00000000C ) 
00000844  0C 00 F0 37  		SUB SP, 00000000C, SP 
00000848  44 0A 00 CC  		CALL itoa 
0000084C  08 00 F0 27  		ADD SP, 000000008, SP 
00000850  00 00 00 80  		POP R0 
00000854  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
00000858  20 00 70 BC  		STORE R0, ( SP + 000000020 ) 
0000085C  04 00 F0 37  		SUB SP, 000000004, SP 
00000860  98 09 00 CC  		CALL rs_writeln 
00000864  04 00 F0 27  		ADD SP, 000000004, SP 
00000868  74 00 00 D4  		JR D1249 
                       D1246   
0000086C  04 00 70 94  		LOADB R0, ( SP + 000000004 ) 
00000870  18 00 00 54  		SHL R0, 000000018, R0 
00000874  18 00 00 64  		ASHR R0, 000000018, R0 
00000878  2F 00 00 6C  		CMP R0, 00000002F 
0000087C  04 00 C0 D5  		JR_EQ D1250 
00000880  5C 00 00 D6  		JR_NE D1251 
                       D1250   
00000884  10 00 70 B4  		LOAD R0, ( SP + 000000010 ) 
00000888  FC FF 7F BC  		STORE R0, ( SP-4 ) 
0000088C  0C 00 70 B4  		LOAD R0, ( SP + 00000000C ) 
00000890  F8 FF 7F BC  		STORE R0, ( SP-8 ) 
00000894  08 00 F0 37  		SUB SP, 8, SP 
00000898  54 04 00 CC  		CALL DivideSigned 
0000089C  04 00 F0 27  		ADD SP, 4, SP 
000008A0  00 00 00 80  		POP R0 
000008A4  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000008A8  1C 00 70 BC  		STORE R0, ( SP + 00000001C ) 
000008AC  00 00 70 B4  		LOAD R0, ( SP + 000000000 ) 
000008B0  F8 FF 7F BC  		STORE R0, ( SP-000000008 ) 
000008B4  0A 00 80 04  		MOVE 00000000A, R1 
000008B8  F4 FF FF BC  		STORE R1, ( SP-00000000C ) 
000008BC  0C 00 F0 37  		SUB SP, 00000000C, SP 
000008C0  44 0A 00 CC  		CALL itoa 
000008C4  08 00 F0 27  		ADD SP, 000000008, SP 
000008C8  00 00 00 80  		POP R0 
000008CC  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000008D0  18 00 70 BC  		STORE R0, ( SP + 000000018 ) 
000008D4  04 00 F0 37  		SUB SP, 000000004, SP 
000008D8  98 09 00 CC  		CALL rs_writeln 
000008DC  04 00 F0 27  		ADD SP, 000000004, SP 
                       D1251   
                       D1249   
                       D1244   
                       D1239   
000008E0  00 00 00 04  		MOVE 000000000, R0 
000008E4  14 00 70 BC  		STORE R0, ( SP + 000000014 ) 
000008E8  14 00 70 B4  		LOAD R0, ( SP + 000000014 ) 
000008EC  50 00 70 BC  		STORE R0, ( SP + 000000050 ) 
000008F0  44 00 F0 27  		ADD SP, 000000044, SP 
000008F4  00 00 80 81  		POP R3 
000008F8  00 00 00 81  		POP R2 
000008FC  00 00 80 80  		POP R1 
00000900  00 00 00 80  		POP R0 
00000904  00 00 00 D8  		RET  
                       rs_init  
00000908  00 00 00 D8  	RET 
                       ;lokacije rs232 
                       IO_SIO_BYTE	`EQU	ffffff20	; byte, RW 
                       IO_SIO_STATUS	`EQU	ffffff21	; byte, RD 
                       IO_SIO_BAUD	`EQU	ffffff22	; half, WR 
                        
                       ; definicije kojekakvih bitmaska 
                       SIO_TX_BUSY	`EQU	04 
                       SIO_RX_OVERRUN	`EQU	02 
                       SIO_RX_FULL	`EQU	01 
                       	 
                         
                       rs_puts 
0000090C  00 00 00 88  		PUSH R0 
00000910  00 00 80 88  		PUSH R1 
00000914  00 00 00 89  		PUSH R2 
00000918  10 00 F0 B4  		LOAD R1, (SP+010) 
                        
                       rs1puts	 
0000091C  00 00 10 94  		LOADB R0, (R1) 
00000920  00 00 00 6C  		CMP R0, 0 
00000924  18 00 C0 D5  		JR_Z rs3puts 
                       		 
                       rs2puts 
00000928  21 FF 0F 91  		LOADB R2, (IO_SIO_STATUS) 
0000092C  04 00 20 15  		AND R2, SIO_TX_BUSY, R2 
00000930  F4 FF 0F D6  		JR_NZ rs2puts 
00000934  20 FF 0F 98  		STOREB R0, (IO_SIO_BYTE)	 
00000938  01 00 90 24  		ADD R1, 1, R1 
0000093C  DC FF 0F D4  		JR rs1puts		 
                        
                       rs3puts		 
00000940  00 00 00 81  		POP R2 
00000944  00 00 80 80  		POP R1 
00000948  00 00 00 80  		POP R0 
0000094C  00 00 00 D8  		RET 
                         
                       rs_putc		 
00000950  00 00 00 88  		PUSH R0 
00000954  00 00 80 88  		PUSH R1 
00000958  0C 00 70 B4  		LOAD R0, (SP+0C) 
                       		 
                       rs1putc 
0000095C  21 FF 8F 90  		LOADB R1, (IO_SIO_STATUS) 
00000960  04 00 90 14  		AND R1, SIO_TX_BUSY, R1 
00000964  F4 FF 0F D6  		JR_NZ rs1putc 
00000968  20 FF 0F 98  		STOREB R0, (IO_SIO_BYTE) 
0000096C  00 00 80 80  		POP R1 
00000970  00 00 00 80  		POP R0 
00000974  00 00 00 D8  		RET 
                         
                       rs_getc 
00000978  00 00 00 88  		PUSH R0 
                        
                       rs1getc 
0000097C  21 FF 0F 90  		LOADB R0, (IO_SIO_STATUS) 
00000980  01 00 00 14  		AND R0, SIO_RX_FULL, R0 
00000984  F4 FF CF D5  		JR_Z rs1getc 
00000988  20 FF 0F 90  		LOADB R0, (IO_SIO_BYTE) 
0000098C  08 00 70 BC  		STORE R0, (SP+08) 
                        
00000990  00 00 00 80  		POP R0 
00000994  00 00 00 D8  		RET 
                         
                       ;using rs_putc 
                       ;using rs_puts 
                       rs_writeln 
00000998  00 00 00 88  		PUSH R0 
                       		 
0000099C  08 00 70 B4  		LOAD R0, (SP+8) ; txt 
000009A0  00 00 00 88  		PUSH R0 
000009A4  0C 09 00 CC  		CALL rs_puts 
                        
000009A8  0A 00 00 04  		MOVE 0A, R0 ; \r 
000009AC  00 00 70 BC  		STORE R0, (SP) 
000009B0  50 09 00 CC  		CALL rs_putc 
                        
000009B4  0D 00 00 04  		MOVE 0D,R0 ; \n 
000009B8  00 00 70 BC  		STORE R0, (SP) 
000009BC  50 09 00 CC  		CALL rs_putc 
000009C0  04 00 F0 27  		ADD SP,4,SP 
                        
000009C4  00 00 00 80  		POP R0 
000009C8  00 00 00 D8  		RET	 
                         
                       ;using rs_putc 
                       rs_readln 
000009CC  00 00 00 88  		PUSH R0 
000009D0  00 00 80 88  		PUSH R1 
000009D4  0C 00 F0 B4  		LOAD R1,(SP+0C) 
000009D8  01 00 90 34  		SUB R1,1,R1 
                       		 
                       rs1readln 
000009DC  21 FF 0F 90  		LOADB R0, (IO_SIO_STATUS) 
000009E0  01 00 00 14  		AND R0, SIO_RX_FULL, R0 
000009E4  F4 FF CF D5  		JR_Z rs1readln 
000009E8  20 FF 0F 90  		LOADB R0, (IO_SIO_BYTE) 
                       				 
                       		 
000009EC  01 00 90 24  		ADD R1,1,R1 
000009F0  0D 00 00 6C  		CMP R0,0D ; == \r 
000009F4  1C 00 C0 D5  		JR_Z rs2readln 
000009F8  0A 00 00 6C  		CMP R0,0A ; == \n 
000009FC  14 00 C0 D5  		JR_Z rs2readln		 
                       		 
00000A00  00 00 00 88  		PUSH R0 
00000A04  50 09 00 CC  		CALL rs_putc 
00000A08  00 00 00 80  		POP R0 
                       		 
00000A0C  00 00 10 9C  		STOREB R0, (R1) 
00000A10  C8 FF 0F D4  		JR rs1readln 
                        
                       rs2readln 
00000A14  00 00 00 04  		MOVE 0,R0 
00000A18  00 00 10 9C  		STOREB R0,(R1) 
                       		 
00000A1C  0A 00 80 04  		MOVE 0A, R1 ; \r 
00000A20  00 00 80 88  		PUSH R1 
00000A24  50 09 00 CC  		CALL rs_putc 
00000A28  0D 00 80 04  		MOVE 0D,R1 ; \n 
00000A2C  00 00 F0 BC  		STORE R1, (SP) 
00000A30  50 09 00 CC  		CALL rs_putc 
00000A34  04 00 F0 27  		ADD SP, 4, SP 
                       		 
00000A38  00 00 80 80  		POP R1 
00000A3C  00 00 00 80  		POP R0 
00000A40  00 00 00 D8  		RET 
                        
                         
                       itoa   
00000A44  00 00 00 88  		PUSH R0 
00000A48  00 00 80 88  		PUSH R1 
00000A4C  00 00 00 89  		PUSH R2 
00000A50  00 00 80 89  		PUSH R3 
00000A54  00 00 00 8A  		PUSH R4 
00000A58  18 00 F0 37  		SUB SP, 000000018, SP 
00000A5C  7C 0D 00 B0  		LOAD R0, ( const7 ) 
00000A60  04 00 70 BC  		STORE R0, ( SP + 000000004 ) 
00000A64  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
00000A68  08 00 70 BC  		STORE R0, ( SP + 000000008 ) 
00000A6C  64 0D 80 B0  		LOAD R1, ( const6 ) 
00000A70  04 00 F0 BC  		STORE R1, ( SP + 000000004 ) 
00000A74  34 00 F0 B4  		LOAD R1, ( SP + 000000034 ) 
00000A78  00 00 F0 BC  		STORE R1, ( SP + 000000000 ) 
00000A7C  00 00 00 6C  		CMP R0, 000000000 
00000A80  04 00 C0 D6  		JR_SLT D1256 
00000A84  10 00 40 D7  		JR_SGE D1257 
                       D1256   
00000A88  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
00000A8C  FF FF 8F 1C  		XOR R0, 0FFFFFFFF, R1 
00000A90  01 00 10 24  		ADD R1, 000000001, R0 
00000A94  38 00 70 BC  		STORE R0, ( SP + 000000038 ) 
                       D1257   
00000A98  60 00 00 D4  		JR D1196 
                       D1195   
00000A9C  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
00000AA0  FC FF 7F BC  		STORE R0, ( SP-4 ) 
00000AA4  30 00 F0 B4  		LOAD R1, ( SP + 000000030 ) 
00000AA8  F8 FF FF BC  		STORE R1, ( SP-8 ) 
00000AAC  08 00 F0 37  		SUB SP, 8, SP 
00000AB0  04 05 00 CC  		CALL ModuloSigned 
00000AB4  04 00 F0 27  		ADD SP, 4, SP 
00000AB8  00 00 00 81  		POP R2 
00000ABC  04 00 F0 B5  		LOAD R3, ( SP + 000000004 ) 
00000AC0  00 00 34 22  		ADD R3, R2, R4 
00000AC4  14 00 70 BD  		STORE R2, ( SP + 000000014 ) 
00000AC8  00 00 40 95  		LOADB R2, ( R4 ) 
00000ACC  00 00 F0 B5  		LOAD R3, ( SP + 000000000 ) 
00000AD0  00 00 30 9D  		STOREB R2, ( R3 ) 
00000AD4  11 00 70 9D  		STOREB R2, ( SP + 000000011 ) 
00000AD8  01 00 B0 25  		ADD R3, 000000001, R3 
00000ADC  00 00 F0 BD  		STORE R3, ( SP + 000000000 ) 
00000AE0  FC FF 7F BC  		STORE R0, ( SP-4 ) 
00000AE4  F8 FF FF BC  		STORE R1, ( SP-8 ) 
00000AE8  08 00 F0 37  		SUB SP, 8, SP 
00000AEC  54 04 00 CC  		CALL DivideSigned 
00000AF0  04 00 F0 27  		ADD SP, 4, SP 
00000AF4  00 00 00 80  		POP R0 
00000AF8  38 00 70 BC  		STORE R0, ( SP + 000000038 ) 
                       D1196   
00000AFC  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
00000B00  30 00 F0 B4  		LOAD R1, ( SP + 000000030 ) 
00000B04  00 00 02 68  		CMP R0, R1 
00000B08  90 FF 4F D7  		JR_SGE D1195 
00000B0C  00 00 C0 D6  		JR_SLT D1197 
                       D1197   
00000B10  04 00 70 B4  		LOAD R0, ( SP + 000000004 ) 
00000B14  38 00 F0 B4  		LOAD R1, ( SP + 000000038 ) 
00000B18  00 00 02 21  		ADD R0, R1, R2 
00000B1C  00 00 20 94  		LOADB R0, ( R2 ) 
00000B20  00 00 F0 B4  		LOAD R1, ( SP + 000000000 ) 
00000B24  00 00 10 9C  		STOREB R0, ( R1 ) 
00000B28  10 00 70 9C  		STOREB R0, ( SP + 000000010 ) 
00000B2C  01 00 90 24  		ADD R1, 000000001, R1 
00000B30  00 00 F0 BC  		STORE R1, ( SP + 000000000 ) 
00000B34  08 00 70 B4  		LOAD R0, ( SP + 000000008 ) 
00000B38  00 00 00 6C  		CMP R0, 000000000 
00000B3C  04 00 C0 D6  		JR_SLT D1261 
00000B40  14 00 40 D7  		JR_SGE D1262 
                       D1261   
00000B44  2D 00 00 04  		MOVE 00000002D, R0 
00000B48  00 00 F0 B4  		LOAD R1, ( SP + 000000000 ) 
00000B4C  00 00 10 9C  		STOREB R0, ( R1 ) 
00000B50  01 00 90 24  		ADD R1, 000000001, R1 
00000B54  00 00 F0 BC  		STORE R1, ( SP + 000000000 ) 
                       D1262   
00000B58  00 00 00 04  		MOVE 000000000, R0 
00000B5C  00 00 F0 B4  		LOAD R1, ( SP + 000000000 ) 
00000B60  00 00 10 9C  		STOREB R0, ( R1 ) 
00000B64  34 00 70 B4  		LOAD R0, ( SP + 000000034 ) 
00000B68  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
00000B6C  04 00 F0 37  		SUB SP, 000000004, SP 
00000B70  A0 0B 00 CC  		CALL strrev 
00000B74  04 00 F0 27  		ADD SP, 000000004, SP 
00000B78  0C 00 70 BC  		STORE R0, ( SP + 00000000C ) 
00000B7C  0C 00 70 B4  		LOAD R0, ( SP + 00000000C ) 
00000B80  38 00 70 BC  		STORE R0, ( SP + 000000038 ) 
00000B84  18 00 F0 27  		ADD SP, 000000018, SP 
00000B88  00 00 00 82  		POP R4 
00000B8C  00 00 80 81  		POP R3 
00000B90  00 00 00 81  		POP R2 
00000B94  00 00 80 80  		POP R1 
00000B98  00 00 00 80  		POP R0 
00000B9C  00 00 00 D8  		RET  
                       strrev 
00000BA0  00 00 00 88  		PUSH R0 
00000BA4  00 00 80 88  		PUSH R1 
00000BA8  00 00 00 89  		PUSH R2 
00000BAC  00 00 80 89  		PUSH R3 
00000BB0  14 00 70 B4  		LOAD R0, (SP+14) 
00000BB4  00 00 80 00  		MOVE R0, R1 
                        
                       strrev1 
00000BB8  00 00 10 95  		LOADB R2, (R1) 
00000BBC  01 00 90 24  		ADD R1, 1, R1 
00000BC0  00 00 20 6C  		CMP R2, 0 
00000BC4  F0 FF 0F D6  		JR_NE strrev1  
                       		 
00000BC8  02 00 90 34  		SUB R1, 2, R1		 
                       		 
                       strrev2 
00000BCC  00 00 10 68  		CMP R1,R0 
00000BD0  1C 00 40 D6  		JR_ULE strrev3 
                       		 
00000BD4  00 00 00 95  		LOADB R2, (R0) 
00000BD8  00 00 90 95  		LOADB R3, (R1) 
00000BDC  00 00 10 9D  		STOREB R2, (R1) 
00000BE0  00 00 80 9D  		STOREB R3, (R0) 
00000BE4  01 00 00 24  		ADD R0, 1, R0 
00000BE8  01 00 90 34  		SUB R1, 1, R1 
00000BEC  DC FF 0F D4  		JR strrev2		 
                       		 
                       strrev3 
00000BF0  00 00 80 81  		POP R3 
00000BF4  00 00 00 81  		POP R2 
00000BF8  00 00 80 80  		POP R1 
00000BFC  00 00 00 80  		POP R0		 
00000C00  00 00 00 D8  		RET 
                        
                         
                       atoi 
00000C04  00 00 00 88  		PUSH R0 
00000C08  00 00 80 88  		PUSH R1 
00000C0C  00 00 00 89  		PUSH R2 
00000C10  00 00 80 89  		PUSH R3 
00000C14  14 00 70 B4  		LOAD R0, (SP+14) 
00000C18  00 00 00 05  		MOVE 0, R2 
00000C1C  00 00 80 04  		MOVE 0, R1 
                       		 
                       atoi1 
00000C20  03 00 A0 55  		SHL R2, 3, R3 
00000C24  01 00 20 55  		SHL R2, 1, R2 
00000C28  00 00 26 21  		ADD R2, R3, R2 
00000C2C  00 00 22 21  		ADD R2, R1, R2 
                       		 
00000C30  00 00 80 94  		LOADB R1, (R0) 
00000C34  30 00 10 6C  		CMP R1,30 
00000C38  14 00 C0 D4  		JR_ULT atoi2 
                       				 
00000C3C  39 00 10 6C  		CMP R1,39 
00000C40  0C 00 80 D6  		JR_UGT atoi2 
                        
00000C44  30 00 90 34  		SUB R1, 30, R1 
00000C48  01 00 00 24  		ADD R0, 1, R0 
00000C4C  D0 FF 0F D4  		JR atoi1 
                       				 
                       atoi2	 
00000C50  14 00 70 BD  		STORE R2, (SP+14)			 
00000C54  00 00 80 81  		POP R3 
00000C58  00 00 00 81  		POP R2 
00000C5C  00 00 80 80  		POP R1 
00000C60  00 00 00 80  		POP R0 
00000C64  00 00 00 D8  		RET		 
                        
                         
                       strstr   
00000C68  00 00 00 D8  		RET  
                       strcpy   
00000C6C  00 00 00 D8  		RET  
                       strcmp   
00000C70  00 00 00 D8  		RET  
                       strcat   
00000C74  00 00 00 D8  		RET  
                       strlen   
00000C78  00 00 00 D8  		RET  
00000C7C  80 0C 00 00  const0 DW temp_14 
00000C80  55 6E 65 73  temp_14 DB 000000055, 00000006E, 000000065, 000000073 
00000C84  69 20 70 72  		DB 000000069, 000000020, 000000070, 000000072 
00000C88  76 69 20 62  		DB 000000076, 000000069, 000000020, 000000062 
00000C8C  72 6F 6A 3A  		DB 000000072, 00000006F, 00000006A, 00000003A 
00000C90  00 00 00 00  		DB 000000000, 000000000, 000000000, 000000000 
00000C94  98 0C 00 00  const1 DW temp_15 
00000C98  55 6E 65 73  temp_15 DB 000000055, 00000006E, 000000065, 000000073 
00000C9C  69 20 64 72  		DB 000000069, 000000020, 000000064, 000000072 
00000CA0  75 67 69 20  		DB 000000075, 000000067, 000000069, 000000020 
00000CA4  62 72 6F 6A  		DB 000000062, 000000072, 00000006F, 00000006A 
00000CA8  3A 00 00 00  		DB 00000003A, 000000000, 000000000, 000000000 
00000CAC  B0 0C 00 00  const2 DW temp_16 
00000CB0  55 6E 65 73  temp_16 DB 000000055, 00000006E, 000000065, 000000073 
00000CB4  69 20 6F 70  		DB 000000069, 000000020, 00000006F, 000000070 
00000CB8  65 72 61 63  		DB 000000065, 000000072, 000000061, 000000063 
00000CBC  69 6A 75 20  		DB 000000069, 00000006A, 000000075, 000000020 
00000CC0  28 2B 2C 20  		DB 000000028, 00000002B, 00000002C, 000000020 
00000CC4  2D 2C 20 2A  		DB 00000002D, 00000002C, 000000020, 00000002A 
00000CC8  2C 20 2F 29  		DB 00000002C, 000000020, 00000002F, 000000029 
00000CCC  00 00 00 00  		DB 000000000, 000000000, 000000000, 000000000 
00000CD0  D4 0C 00 00  const3 DW temp_17 
00000CD4  0A 00 00 00  temp_17 DB 00000000A, 000000000, 000000000, 000000000 
00000CD8  DC 0C 00 00  const4 DW temp_18 
00000CDC  3D 00 00 00  temp_18 DB 00000003D, 000000000, 000000000, 000000000 
00000CE0  E4 0C 00 00  const5 DW temp_19 
                       temp_19 `DS 80 
00000D64  68 0D 00 00  const6 DW temp_20 
00000D68  30 31 32 33  temp_20 DB 000000030, 000000031, 000000032, 000000033 
00000D6C  34 35 36 37  		DB 000000034, 000000035, 000000036, 000000037 
00000D70  38 39 61 62  		DB 000000038, 000000039, 000000061, 000000062 
00000D74  63 64 65 66  		DB 000000063, 000000064, 000000065, 000000066 
00000D78  00 00 00 00  		DB 000000000, 000000000, 000000000, 000000000 
00000D7C  80 0D 00 00  const7 DW temp_21 
                       temp_21 `DS 16 
