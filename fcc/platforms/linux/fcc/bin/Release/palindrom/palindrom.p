                       		`ORG 400 
00000400  04 00 F0 37  		SUB SP,4,SP 
00000404  70 05 00 CC  		CALL main 
00000408  04 00 F0 27  		ADD SP,4,SP 
0000040C  00 00 00 D8  		RET 
00000410  00 00 00 88  DivideSigned	PUSH R0 
00000414  00 00 80 88  			PUSH R1 
00000418  00 00 00 89  			PUSH R2 
0000041C  00 00 80 89  			PUSH R3 
00000420  00 00 00 8A  			PUSH R4 ;boolean za predznak 
00000424  00 00 00 06  			MOVE 0, R4 
00000428  1C 00 F0 B4  			LOAD R1, (SP+1C) ;ucitaj veci ili prvi 
0000042C  18 00 70 B5  			LOAD R2, (SP+18) ;ucitaj manji ili drugi 
00000430  00 00 00 04  			MOVE 0, R0 ;rezultat se sprema u R0 
00000434  01 00 80 05  			MOVE 1, R3 ;na neki nacin kompas 
00000438  00 00 20 6C  			CMP R2, 0 
0000043C  BC 04 C0 C5  			JP_EQ DIVSIG7 ;ne smijes djeliti sa nulom 
00000440  4C 04 80 C7  			JP_SGT DIVSIG1 
00000444  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno  
00000448  00 00 04 31  			SUB R0, R2, R2 
0000044C  00 00 10 6C  DIVSIG1			CMP R1, 0 	   ;ako je pozitivan idi DIVSIG3 xd 
00000450  5C 04 80 C7  			JP_SGT DIVSIG2 
00000454  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno 
00000458  00 00 82 30  			SUB R0, R1, R1 
                        
0000045C  00 00 22 68  DIVSIG2			CMP R2, R1 
00000460  70 04 80 C7  			JP_SGT DIVSIG3 
00000464  01 00 20 55  			SHL R2, 1, R2 
00000468  01 00 B0 55  			SHL R3, 1, R3 
0000046C  5C 04 00 C4  			JP DIVSIG2 
00000470  00 00 14 68  DIVSIG3		CMP R1, R2	   ;zelimo da R1>R2 
00000474  80 04 C0 C6  			JP_SLT DIVSIG4 ;ako nije  
00000478  00 00 94 30  			SUB R1,R2,R1 
0000047C  00 00 06 20  			ADD R0,R3,R0 
00000480  01 00 B0 5D  DIVSIG4		SHR R3,1,R3 
00000484  90 04 C0 C4  			JP_C DIVSIG5 
00000488  01 00 20 5D  			SHR R2,1,R2 
0000048C  70 04 00 C4  			JP DIVSIG3 
00000490  01 00 40 5E  DIVSIG5			SHR R4,1,R4 
00000494  A0 04 00 C5  			JP_NC DIVSIG6 
00000498  00 00 80 05  			MOVE 0, R3 
0000049C  00 00 30 30  			SUB R3,R0,R0 ;baci minus na rezultat 
000004A0  1C 00 70 BC  DIVSIG6		STORE R0,(SP+1C) 
000004A4  00 00 00 82  			POP R4 
000004A8  00 00 80 81  			POP R3 
000004AC  00 00 00 81  			POP R2 
000004B0  00 00 80 80  			POP R1 
000004B4  00 00 00 80  			POP R0 
000004B8  00 00 00 D8  			RET 
000004BC  00 00 00 F8  DIVSIG7		HALT 
000004C0  00 00 00 88  ModuloSigned	PUSH R0 
000004C4  00 00 80 88  			PUSH R1 
000004C8  00 00 00 89  			PUSH R2 
000004CC  00 00 80 89  			PUSH R3 
000004D0  00 00 00 8A  			PUSH R4 ;boolean za predznak 
000004D4  00 00 00 06  			MOVE 0, R4 
000004D8  1C 00 F0 B4  			LOAD R1, (SP+1C) ;ucitaj veci ili prvi 
000004DC  18 00 70 B5  			LOAD R2, (SP+18) ;ucitaj manji ili drugi 
000004E0  00 00 00 04  			MOVE 0, R0 ;rezultat se sprema u R0 
000004E4  01 00 80 05  			MOVE 1, R3 ;na neki nacin kompas 
000004E8  00 00 20 6C  			CMP R2, 0 
000004EC  6C 05 C0 C5  			JP_EQ MODUSG7 ;ne smijes djeliti sa nulom 
000004F0  FC 04 80 C7  			JP_SGT MODUSG1 
000004F4  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno  
000004F8  00 00 04 31  			SUB R0, R2, R2 
000004FC  00 00 10 6C  MODUSG1			CMP R1, 0 	   ;ako je pozitivan idi MODUSG3 xd 
00000500  0C 05 80 C7  			JP_SGT MODUSG2 
00000504  01 00 40 26  			ADD R4, 1, R4 ;zbroji sa 1 ako je negativno 
00000508  00 00 82 30  			SUB R0, R1, R1 
                        
0000050C  00 00 22 68  MODUSG2			CMP R2, R1 
00000510  20 05 80 C7  			JP_SGT MODUSG3 
00000514  01 00 20 55  			SHL R2, 1, R2 
00000518  01 00 B0 55  			SHL R3, 1, R3 
0000051C  0C 05 00 C4  			JP MODUSG2 
00000520  00 00 14 68  MODUSG3		CMP R1, R2	   ;zelimo da R1>R2 
00000524  30 05 C0 C6  			JP_SLT MODUSG4 ;ako nije  
00000528  00 00 94 30  			SUB R1,R2,R1 
0000052C  00 00 06 20  			ADD R0,R3,R0 
00000530  01 00 B0 5D  MODUSG4		SHR R3,1,R3 
00000534  40 05 C0 C4  			JP_C MODUSG5 
00000538  01 00 20 5D  			SHR R2,1,R2 
0000053C  20 05 00 C4  			JP MODUSG3 
00000540  00 00 40 6C  MODUSG5			CMP R4,0 
00000544  50 05 C0 C5  			JP_EQ MODUSG6 
00000548  00 00 80 05  			MOVE 0, R3 
0000054C  00 00 B2 30  			SUB R3,R1,R1 ;baci minus na rezultat 
00000550  1C 00 F0 BC  MODUSG6		STORE R1,(SP+1C) 
00000554  00 00 00 82  			POP R4 
00000558  00 00 80 81  			POP R3 
0000055C  00 00 00 81  			POP R2 
00000560  00 00 80 80  			POP R1 
00000564  00 00 00 80  			POP R0 
00000568  00 00 00 D8  			RET 
0000056C  00 00 00 F8  MODUSG7		HALT 
                       main   
00000570  00 00 00 88  		PUSH R0 
00000574  00 00 80 88  		PUSH R1 
00000578  00 00 00 89  		PUSH R2 
0000057C  00 00 80 89  		PUSH R3 
00000580  21 00 F0 37  		SUB SP, 000000021, SP 
00000584  3C 0A 00 B0  		LOAD R0, ( const3 ) 
00000588  08 00 70 BC  		STORE R0, ( SP + 000000008 ) 
0000058C  04 00 F0 37  		SUB SP, 000000004, SP 
00000590  E4 08 00 CC  		CALL rs_init 
00000594  04 00 F0 27  		ADD SP, 000000004, SP 
00000598  04 0A 00 B0  		LOAD R0, ( const0 ) 
0000059C  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000005A0  04 00 F0 37  		SUB SP, 000000004, SP 
000005A4  58 09 00 CC  		CALL rs_writeln 
000005A8  04 00 F0 27  		ADD SP, 000000004, SP 
000005AC  08 00 70 B4  		LOAD R0, ( SP + 000000008 ) 
000005B0  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000005B4  04 00 F0 37  		SUB SP, 000000004, SP 
000005B8  8C 09 00 CC  		CALL rs_readln 
000005BC  04 00 F0 27  		ADD SP, 000000004, SP 
000005C0  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000005C4  04 00 F0 37  		SUB SP, 000000004, SP 
000005C8  A8 08 00 CC  		CALL strlen 
000005CC  00 00 00 80  		POP R0 
000005D0  00 00 70 BC  		STORE R0, ( SP + 000000000 ) 
000005D4  00 00 80 04  		MOVE 000000000, R1 
000005D8  04 00 F0 BC  		STORE R1, ( SP + 000000004 ) 
000005DC  84 00 00 D4  		JR D1230 
                       D1229   
000005E0  08 00 70 B4  		LOAD R0, ( SP + 000000008 ) 
000005E4  04 00 F0 B4  		LOAD R1, ( SP + 000000004 ) 
000005E8  00 00 02 21  		ADD R0, R1, R2 
000005EC  00 00 A0 95  		LOADB R3, ( R2 ) 
000005F0  20 00 F0 9D  		STOREB R3, ( SP + 000000020 ) 
000005F4  00 00 70 B5  		LOAD R2, ( SP + 000000000 ) 
000005F8  FF FF AF 25  		ADD R2, 0FFFFFFFF, R3 
000005FC  00 00 32 31  		SUB R3, R1, R2 
00000600  1C 00 F0 BD  		STORE R3, ( SP + 00000001C ) 
00000604  00 00 84 20  		ADD R0, R2, R1 
00000608  18 00 70 BD  		STORE R2, ( SP + 000000018 ) 
0000060C  00 00 10 94  		LOADB R0, ( R1 ) 
00000610  20 00 F0 94  		LOADB R1, ( SP + 000000020 ) 
00000614  18 00 90 54  		SHL R1, 000000018, R1 
00000618  18 00 90 64  		ASHR R1, 000000018, R1 
0000061C  00 00 10 68  		CMP R1, R0 
00000620  14 00 70 9C  		STOREB R0, ( SP + 000000014 ) 
00000624  04 00 00 D6  		JR_NE D1237 
00000628  2C 00 C0 D5  		JR_EQ D1238 
                       D1237   
0000062C  14 0A 00 B0  		LOAD R0, ( const1 ) 
00000630  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
00000634  04 00 F0 37  		SUB SP, 000000004, SP 
00000638  58 09 00 CC  		CALL rs_writeln 
0000063C  04 00 F0 27  		ADD SP, 000000004, SP 
00000640  21 00 F0 27  		ADD SP, 000000021, SP 
00000644  00 00 80 81  		POP R3 
00000648  00 00 00 81  		POP R2 
0000064C  00 00 80 80  		POP R1 
00000650  00 00 00 80  		POP R0 
00000654  00 00 00 D8  		RET  
                       D1238   
00000658  04 00 70 B4  		LOAD R0, ( SP + 000000004 ) 
0000065C  01 00 00 24  		ADD R0, 000000001, R0 
00000660  04 00 70 BC  		STORE R0, ( SP + 000000004 ) 
                       D1230   
00000664  00 00 70 B4  		LOAD R0, ( SP + 000000000 ) 
00000668  FC FF 7F BC  		STORE R0, ( SP-4 ) 
0000066C  02 00 80 04  		MOVE 000000002, R1 
00000670  F8 FF FF BC  		STORE R1, ( SP-8 ) 
00000674  08 00 F0 37  		SUB SP, 8, SP 
00000678  10 04 00 CC  		CALL DivideSigned 
0000067C  04 00 F0 27  		ADD SP, 4, SP 
00000680  00 00 00 80  		POP R0 
00000684  04 00 F0 B4  		LOAD R1, ( SP + 000000004 ) 
00000688  00 00 02 68  		CMP R0, R1 
0000068C  10 00 70 BC  		STORE R0, ( SP + 000000010 ) 
00000690  4C FF 8F D7  		JR_SGT D1229 
00000694  00 00 00 D7  		JR_SLE D1231 
                       D1231   
00000698  28 0A 00 B0  		LOAD R0, ( const2 ) 
0000069C  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000006A0  04 00 F0 37  		SUB SP, 000000004, SP 
000006A4  58 09 00 CC  		CALL rs_writeln 
000006A8  04 00 F0 27  		ADD SP, 000000004, SP 
000006AC  00 00 80 04  		MOVE 000000000, R1 
000006B0  0C 00 F0 BC  		STORE R1, ( SP + 00000000C ) 
000006B4  0C 00 70 B4  		LOAD R0, ( SP + 00000000C ) 
000006B8  2D 00 70 BC  		STORE R0, ( SP + 00000002D ) 
000006BC  21 00 F0 27  		ADD SP, 000000021, SP 
000006C0  00 00 80 81  		POP R3 
000006C4  00 00 00 81  		POP R2 
000006C8  00 00 80 80  		POP R1 
000006CC  00 00 00 80  		POP R0 
000006D0  00 00 00 D8  		RET  
                       itoa   
000006D4  00 00 00 88  		PUSH R0 
000006D8  00 00 80 88  		PUSH R1 
000006DC  00 00 00 89  		PUSH R2 
000006E0  00 00 80 89  		PUSH R3 
000006E4  00 00 00 8A  		PUSH R4 
000006E8  18 00 F0 37  		SUB SP, 000000018, SP 
000006EC  D8 0A 00 B0  		LOAD R0, ( const5 ) 
000006F0  04 00 70 BC  		STORE R0, ( SP + 000000004 ) 
000006F4  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
000006F8  08 00 70 BC  		STORE R0, ( SP + 000000008 ) 
000006FC  C0 0A 80 B0  		LOAD R1, ( const4 ) 
00000700  04 00 F0 BC  		STORE R1, ( SP + 000000004 ) 
00000704  34 00 F0 B4  		LOAD R1, ( SP + 000000034 ) 
00000708  00 00 F0 BC  		STORE R1, ( SP + 000000000 ) 
0000070C  00 00 00 6C  		CMP R0, 000000000 
00000710  04 00 C0 D6  		JR_SLT D1243 
00000714  10 00 40 D7  		JR_SGE D1244 
                       D1243   
00000718  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
0000071C  FF FF 8F 1C  		XOR R0, 0FFFFFFFF, R1 
00000720  01 00 10 24  		ADD R1, 000000001, R0 
00000724  38 00 70 BC  		STORE R0, ( SP + 000000038 ) 
                       D1244   
00000728  60 00 00 D4  		JR D1222 
                       D1221   
0000072C  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
00000730  FC FF 7F BC  		STORE R0, ( SP-4 ) 
00000734  30 00 F0 B4  		LOAD R1, ( SP + 000000030 ) 
00000738  F8 FF FF BC  		STORE R1, ( SP-8 ) 
0000073C  08 00 F0 37  		SUB SP, 8, SP 
00000740  C0 04 00 CC  		CALL ModuloSigned 
00000744  04 00 F0 27  		ADD SP, 4, SP 
00000748  00 00 00 81  		POP R2 
0000074C  04 00 F0 B5  		LOAD R3, ( SP + 000000004 ) 
00000750  00 00 34 22  		ADD R3, R2, R4 
00000754  14 00 70 BD  		STORE R2, ( SP + 000000014 ) 
00000758  00 00 40 95  		LOADB R2, ( R4 ) 
0000075C  00 00 F0 B5  		LOAD R3, ( SP + 000000000 ) 
00000760  00 00 30 9D  		STOREB R2, ( R3 ) 
00000764  11 00 70 9D  		STOREB R2, ( SP + 000000011 ) 
00000768  01 00 B0 25  		ADD R3, 000000001, R3 
0000076C  00 00 F0 BD  		STORE R3, ( SP + 000000000 ) 
00000770  FC FF 7F BC  		STORE R0, ( SP-4 ) 
00000774  F8 FF FF BC  		STORE R1, ( SP-8 ) 
00000778  08 00 F0 37  		SUB SP, 8, SP 
0000077C  10 04 00 CC  		CALL DivideSigned 
00000780  04 00 F0 27  		ADD SP, 4, SP 
00000784  00 00 00 80  		POP R0 
00000788  38 00 70 BC  		STORE R0, ( SP + 000000038 ) 
                       D1222   
0000078C  38 00 70 B4  		LOAD R0, ( SP + 000000038 ) 
00000790  30 00 F0 B4  		LOAD R1, ( SP + 000000030 ) 
00000794  00 00 02 68  		CMP R0, R1 
00000798  90 FF 4F D7  		JR_SGE D1221 
0000079C  00 00 C0 D6  		JR_SLT D1223 
                       D1223   
000007A0  04 00 70 B4  		LOAD R0, ( SP + 000000004 ) 
000007A4  38 00 F0 B4  		LOAD R1, ( SP + 000000038 ) 
000007A8  00 00 02 21  		ADD R0, R1, R2 
000007AC  00 00 20 94  		LOADB R0, ( R2 ) 
000007B0  00 00 F0 B4  		LOAD R1, ( SP + 000000000 ) 
000007B4  00 00 10 9C  		STOREB R0, ( R1 ) 
000007B8  10 00 70 9C  		STOREB R0, ( SP + 000000010 ) 
000007BC  01 00 90 24  		ADD R1, 000000001, R1 
000007C0  00 00 F0 BC  		STORE R1, ( SP + 000000000 ) 
000007C4  08 00 70 B4  		LOAD R0, ( SP + 000000008 ) 
000007C8  00 00 00 6C  		CMP R0, 000000000 
000007CC  04 00 C0 D6  		JR_SLT D1248 
000007D0  14 00 40 D7  		JR_SGE D1249 
                       D1248   
000007D4  2D 00 00 04  		MOVE 00000002D, R0 
000007D8  00 00 F0 B4  		LOAD R1, ( SP + 000000000 ) 
000007DC  00 00 10 9C  		STOREB R0, ( R1 ) 
000007E0  01 00 90 24  		ADD R1, 000000001, R1 
000007E4  00 00 F0 BC  		STORE R1, ( SP + 000000000 ) 
                       D1249   
000007E8  00 00 00 04  		MOVE 000000000, R0 
000007EC  00 00 F0 B4  		LOAD R1, ( SP + 000000000 ) 
000007F0  00 00 10 9C  		STOREB R0, ( R1 ) 
000007F4  34 00 70 B4  		LOAD R0, ( SP + 000000034 ) 
000007F8  FC FF 7F BC  		STORE R0, ( SP-000000004 ) 
000007FC  04 00 F0 37  		SUB SP, 000000004, SP 
00000800  30 08 00 CC  		CALL strrev 
00000804  04 00 F0 27  		ADD SP, 000000004, SP 
00000808  0C 00 70 BC  		STORE R0, ( SP + 00000000C ) 
0000080C  0C 00 70 B4  		LOAD R0, ( SP + 00000000C ) 
00000810  38 00 70 BC  		STORE R0, ( SP + 000000038 ) 
00000814  18 00 F0 27  		ADD SP, 000000018, SP 
00000818  00 00 00 82  		POP R4 
0000081C  00 00 80 81  		POP R3 
00000820  00 00 00 81  		POP R2 
00000824  00 00 80 80  		POP R1 
00000828  00 00 00 80  		POP R0 
0000082C  00 00 00 D8  		RET  
                       strrev 
00000830  00 00 00 88  		PUSH R0 
00000834  00 00 80 88  		PUSH R1 
00000838  00 00 00 89  		PUSH R2 
0000083C  00 00 80 89  		PUSH R3 
00000840  14 00 70 B4  		LOAD R0, (SP+14) 
00000844  00 00 80 00  		MOVE R0, R1 
                        
                       strrev1 
00000848  00 00 10 95  		LOADB R2, (R1) 
0000084C  01 00 90 24  		ADD R1, 1, R1 
00000850  00 00 20 6C  		CMP R2, 0 
00000854  F0 FF 0F D6  		JR_NE strrev1  
                       		 
00000858  02 00 90 34  		SUB R1, 2, R1		 
                       		 
                       strrev2 
0000085C  00 00 10 68  		CMP R1,R0 
00000860  1C 00 40 D6  		JR_ULE strrev3 
                       		 
00000864  00 00 00 95  		LOADB R2, (R0) 
00000868  00 00 90 95  		LOADB R3, (R1) 
0000086C  00 00 10 9D  		STOREB R2, (R1) 
00000870  00 00 80 9D  		STOREB R3, (R0) 
00000874  01 00 00 24  		ADD R0, 1, R0 
00000878  01 00 90 34  		SUB R1, 1, R1 
0000087C  DC FF 0F D4  		JR strrev2		 
                       		 
                       strrev3 
00000880  00 00 80 81  		POP R3 
00000884  00 00 00 81  		POP R2 
00000888  00 00 80 80  		POP R1 
0000088C  00 00 00 80  		POP R0		 
00000890  00 00 00 D8  		RET 
                        
                         
                       atoi   
00000894  00 00 00 D8  		RET  
                       strstr   
00000898  00 00 00 D8  		RET  
                       strcpy   
0000089C  00 00 00 D8  		RET  
                       strcmp   
000008A0  00 00 00 D8  		RET  
                       strcat   
000008A4  00 00 00 D8  		RET  
                       strlen 
000008A8  00 00 00 88  		PUSH R0 
000008AC  00 00 80 88  		PUSH R1 
000008B0  00 00 00 89  		PUSH R2 
000008B4  10 00 70 B4  		LOAD R0, (SP+10) 
                       			 
000008B8  FF FF 0F 05  		MOVE -1, R2 
                       strlen1 
000008BC  00 00 80 94  		LOADB R1, (R0) 
000008C0  01 00 20 25  		ADD R2, 1, R2 
000008C4  01 00 00 24  		ADD R0, 1, R0 
000008C8  00 00 10 6C  		CMP R1, 0 
000008CC  EC FF 0F D6  		JR_NE strlen1 
                       			 
000008D0  10 00 70 BD  		STORE R2, (SP+10) 
                       strlen2			 
000008D4  00 00 00 81  		POP R2 
000008D8  00 00 80 80  		POP R1 
000008DC  00 00 00 80  		POP R0	 
000008E0  00 00 00 D8  		RET 
                         
                       rs_init  
000008E4  00 00 00 D8  	RET 
                       ;lokacije rs232 
                       IO_SIO_BYTE	`EQU	ffffff20	; byte, RW 
                       IO_SIO_STATUS	`EQU	ffffff21	; byte, RD 
                       IO_SIO_BAUD	`EQU	ffffff22	; half, WR 
                        
                       ; definicije kojekakvih bitmaska 
                       SIO_TX_BUSY	`EQU	04 
                       SIO_RX_OVERRUN	`EQU	02 
                       SIO_RX_FULL	`EQU	01 
                       	 
                         
                       rs_puts 
000008E8  00 00 00 88  		PUSH R0 
000008EC  00 00 80 88  		PUSH R1 
000008F0  00 00 00 89  		PUSH R2 
000008F4  10 00 F0 B4  		LOAD R1, (SP+010) 
                        
                       rs1puts	 
000008F8  00 00 10 94  		LOADB R0, (R1) 
000008FC  00 00 00 6C  		CMP R0, 0 
00000900  18 00 C0 D5  		JR_Z rs3puts 
                       		 
                       rs2puts 
00000904  21 FF 0F 91  		LOADB R2, (IO_SIO_STATUS) 
00000908  04 00 20 15  		AND R2, SIO_TX_BUSY, R2 
0000090C  F4 FF 0F D6  		JR_NZ rs2puts 
00000910  20 FF 0F 98  		STOREB R0, (IO_SIO_BYTE)	 
00000914  01 00 90 24  		ADD R1, 1, R1 
00000918  DC FF 0F D4  		JR rs1puts		 
                        
                       rs3puts		 
0000091C  00 00 00 81  		POP R2 
00000920  00 00 80 80  		POP R1 
00000924  00 00 00 80  		POP R0 
00000928  00 00 00 D8  		RET 
                         
                       rs_putc		 
0000092C  00 00 00 88  		PUSH R0 
00000930  00 00 80 88  		PUSH R1 
00000934  0C 00 70 B4  		LOAD R0, (SP+0C) 
                       		 
                       rs1putc 
00000938  21 FF 8F 90  		LOADB R1, (IO_SIO_STATUS) 
0000093C  04 00 90 14  		AND R1, SIO_TX_BUSY, R1 
00000940  F4 FF 0F D6  		JR_NZ rs1putc 
00000944  20 FF 0F 98  		STOREB R0, (IO_SIO_BYTE) 
00000948  00 00 80 80  		POP R1 
0000094C  00 00 00 80  		POP R0 
00000950  00 00 00 D8  		RET 
                         
                       rs_getc   
00000954  00 00 00 D8  		RET  
                       ;using rs_putc 
                       ;using rs_puts 
                       rs_writeln 
00000958  00 00 00 88  		PUSH R0 
                       		 
0000095C  08 00 70 B4  		LOAD R0, (SP+8) ; txt 
00000960  00 00 00 88  		PUSH R0 
00000964  E8 08 00 CC  		CALL rs_puts 
                        
00000968  0A 00 00 04  		MOVE 0A, R0 ; \r 
0000096C  00 00 70 BC  		STORE R0, (SP) 
00000970  2C 09 00 CC  		CALL rs_putc 
                        
00000974  0D 00 00 04  		MOVE 0D,R0 ; \n 
00000978  00 00 70 BC  		STORE R0, (SP) 
0000097C  2C 09 00 CC  		CALL rs_putc 
00000980  04 00 F0 27  		ADD SP,4,SP 
                        
00000984  00 00 00 80  		POP R0 
00000988  00 00 00 D8  		RET	 
                         
                       ;using rs_putc 
                       rs_readln 
0000098C  00 00 00 88  		PUSH R0 
00000990  00 00 80 88  		PUSH R1 
00000994  0C 00 F0 B4  		LOAD R1,(SP+0C) 
00000998  01 00 90 34  		SUB R1,1,R1 
                       		 
                       rs1readln 
0000099C  21 FF 0F 90  		LOADB R0, (IO_SIO_STATUS) 
000009A0  01 00 00 14  		AND R0, SIO_RX_FULL, R0 
000009A4  F4 FF CF D5  		JR_Z rs1readln 
000009A8  20 FF 0F 90  		LOADB R0, (IO_SIO_BYTE) 
                       				 
                       		 
000009AC  01 00 90 24  		ADD R1,1,R1 
000009B0  0D 00 00 6C  		CMP R0,0D ; == \r 
000009B4  1C 00 C0 D5  		JR_Z rs2readln 
000009B8  0A 00 00 6C  		CMP R0,0A ; == \n 
000009BC  14 00 C0 D5  		JR_Z rs2readln		 
                       		 
000009C0  00 00 00 88  		PUSH R0 
000009C4  2C 09 00 CC  		CALL rs_putc 
000009C8  00 00 00 80  		POP R0 
                       		 
000009CC  00 00 10 9C  		STOREB R0, (R1) 
000009D0  C8 FF 0F D4  		JR rs1readln 
                        
                       rs2readln 
000009D4  00 00 00 04  		MOVE 0,R0 
000009D8  00 00 10 9C  		STOREB R0,(R1) 
                       		 
000009DC  0A 00 80 04  		MOVE 0A, R1 ; \r 
000009E0  00 00 80 88  		PUSH R1 
000009E4  2C 09 00 CC  		CALL rs_putc 
000009E8  0D 00 80 04  		MOVE 0D,R1 ; \n 
000009EC  00 00 F0 BC  		STORE R1, (SP) 
000009F0  2C 09 00 CC  		CALL rs_putc 
000009F4  04 00 F0 27  		ADD SP, 4, SP 
                       		 
000009F8  00 00 80 80  		POP R1 
000009FC  00 00 00 80  		POP R0 
00000A00  00 00 00 D8  		RET 
                        
                         
00000A04  08 0A 00 00  const0 DW temp_14 
00000A08  55 6E 65 73  temp_14 DB 000000055, 00000006E, 000000065, 000000073 
00000A0C  69 20 74 65  		DB 000000069, 000000020, 000000074, 000000065 
00000A10  6B 73 74 00  		DB 00000006B, 000000073, 000000074, 000000000 
00000A14  18 0A 00 00  const1 DW temp_15 
00000A18  4E 69 6A 65  temp_15 DB 00000004E, 000000069, 00000006A, 000000065 
00000A1C  20 70 61 6C  		DB 000000020, 000000070, 000000061, 00000006C 
00000A20  69 6E 64 72  		DB 000000069, 00000006E, 000000064, 000000072 
00000A24  6F 6D 00 00  		DB 00000006F, 00000006D, 000000000, 000000000 
00000A28  2C 0A 00 00  const2 DW temp_16 
00000A2C  50 61 6C 69  temp_16 DB 000000050, 000000061, 00000006C, 000000069 
00000A30  6E 64 72 6F  		DB 00000006E, 000000064, 000000072, 00000006F 
00000A34  6D 20 6A 65  		DB 00000006D, 000000020, 00000006A, 000000065 
00000A38  00 00 00 00  		DB 000000000, 000000000, 000000000, 000000000 
00000A3C  40 0A 00 00  const3 DW temp_17 
                       temp_17 `DS 80 
00000AC0  C4 0A 00 00  const4 DW temp_18 
00000AC4  30 31 32 33  temp_18 DB 000000030, 000000031, 000000032, 000000033 
00000AC8  34 35 36 37  		DB 000000034, 000000035, 000000036, 000000037 
00000ACC  38 39 61 62  		DB 000000038, 000000039, 000000061, 000000062 
00000AD0  63 64 65 66  		DB 000000063, 000000064, 000000065, 000000066 
00000AD4  00 00 00 00  		DB 000000000, 000000000, 000000000, 000000000 
00000AD8  DC 0A 00 00  const5 DW temp_19 
                       temp_19 `DS 16 
